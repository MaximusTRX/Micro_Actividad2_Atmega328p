
actividad_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000419  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000418  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000419  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009f6  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000719  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005a9  00000000  00000000  0000165b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a8  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004b8  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000013e  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 41 01 	call	0x282	; 0x282 <main>
  88:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HSCR04_Start>:
void HSCR04_Time1us(){
	time1us++;
}

void HSCR04_Start(){
	time1us = 0;
  90:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time1us+0x1>
  94:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <time1us>
	
	if (myHandle.WritePin!=NULL){
  98:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <myHandle>
  9c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <myHandle+0x1>
  a0:	89 2b       	or	r24, r25
  a2:	29 f0       	breq	.+10     	; 0xae <HSCR04_Start+0x1e>
		flags |= 0x01;
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ae:	08 95       	ret

000000b0 <__vector_11>:
void do_Transmit();

//.

//========================== Declaración Funciones de Interrupciones
ISR (TIMER1_COMPA_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	//TCNT1	= 0x00;
	OCR1A	+= 20000;			// Equivale a 10ms
  c2:	e8 e8       	ldi	r30, 0x88	; 136
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	91 81       	ldd	r25, Z+1	; 0x01
  ca:	80 5e       	subi	r24, 0xE0	; 224
  cc:	91 4b       	sbci	r25, 0xB1	; 177
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
	GPIOR0	|= (1<<F10MS);
  d2:	8e b3       	in	r24, 0x1e	; 30
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8e bb       	out	0x1e, r24	; 30
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_12>:

ISR (TIMER1_COMPB_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	//TCNT1	= 0x00;
	OCR1B	+= 20;				// Equivale a 10us
  fc:	ea e8       	ldi	r30, 0x8A	; 138
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	91 81       	ldd	r25, Z+1	; 0x01
 104:	44 96       	adiw	r24, 0x14	; 20
 106:	91 83       	std	Z+1, r25	; 0x01
 108:	80 83       	st	Z, r24
	GPIOR0	|= (1<<F10US);
 10a:	8e b3       	in	r24, 0x1e	; 30
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	8e bb       	out	0x1e, r24	; 30
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_18>:

ISR (USART_RX_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
	
}
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:


ISR (PCINT0_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	if (!(GPIOR1 & (1<<ECHOSTATE)))
 144:	0a b4       	in	r0, 0x2a	; 42
 146:	04 fc       	sbrc	r0, 4
 148:	0f c0       	rjmp	.+30     	; 0x168 <__vector_3+0x32>
	{
		tEchoUP =	TCNT1;
 14a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 14e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 152:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tEchoUP+0x1>
 156:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tEchoUP>
		EICRA	=	(1<<ISC01);		//!< Description: Configura el flanco a detectar, falling.
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
		GPIOR1	|=	(1<<ECHOSTATE);
 160:	8a b5       	in	r24, 0x2a	; 42
 162:	80 61       	ori	r24, 0x10	; 16
 164:	8a bd       	out	0x2a, r24	; 42
 166:	0b c0       	rjmp	.+22     	; 0x17e <__vector_3+0x48>
	}else{
		tEchoDOWN = TCNT1;
 168:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 16c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 170:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tEchoDOWN+0x1>
 174:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tEchoDOWN>
		GPIOR1 |= (1<<ECHOFINISH);
 178:	8a b5       	in	r24, 0x2a	; 42
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8a bd       	out	0x2a, r24	; 42
	}
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <ini_ports>:


//========================== Initialization Functions
void ini_ports(){
	DDRB	= (1<<LEDBUILDIN) | (1<<TRIGGER);
 18c:	82 e2       	ldi	r24, 0x22	; 34
 18e:	84 b9       	out	0x04, r24	; 4
	PORTB	= (1<<PINB4) | (1<<ECHO);
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <ini_Timer1>:
}

void ini_Timer1(){
	TCCR1A	= 0x00;
 196:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B	= 0b00000010;	// PRESSCALER /8 -> +1 cada 500ns
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A	= 20000;		// Equivale a 10ms
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	9e e4       	ldi	r25, 0x4E	; 78
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B	= 20;			// Equivale a 10us
 1ac:	84 e1       	ldi	r24, 0x14	; 20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIMSK1	= 0b00000110;
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TIFR1	= TIFR1;
 1be:	86 b3       	in	r24, 0x16	; 22
 1c0:	86 bb       	out	0x16, r24	; 22
 1c2:	08 95       	ret

000001c4 <ini_USART0>:
}

void ini_USART0(){
	UCSR0A = UCSR0A;
 1c4:	e0 ec       	ldi	r30, 0xC0	; 192
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 83       	st	Z, r24
	UCSR0A = (1<<U2X0);
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
	UCSR0B = (1<<TXEN0); //(1<<RXCIE0) | (1<<RXEN0) | 
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<< UCSZ01) | (1<< UCSZ00);
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0  = 0x10;
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e8:	08 95       	ret

000001ea <ini_Externals>:
	//UBRR0H = (16>>8);
	//UBRR0L = 16; 
}

void ini_Externals(){
	EIMSK	= (1<<INT0);			//!< Description: Habilita Interrupción general de los pines INT0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8d bb       	out	0x1d, r24	; 29
	PCMSK0	= (1<<PCINT0);			//!< Description: Seleccióna el pin que se controla el cambio para generar la interrupt
 1ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCICR	|= (1<<PCIE0);			//!< Description: Hablilita la interrupción por cambio de flanco
 1f2:	e8 e6       	ldi	r30, 0x68	; 104
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <do_10ms>:
}

//===================================== Functions
void do_10ms(){
	GPIOR0 &= ~(1<<F10MS);
 1fe:	8e b3       	in	r24, 0x1e	; 30
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	8e bb       	out	0x1e, r24	; 30
	
	t100ms --;
 204:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <t100ms>
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <t100ms>
	if(!t100ms)
 20e:	81 11       	cpse	r24, r1
 210:	06 c0       	rjmp	.+12     	; 0x21e <do_10ms+0x20>
	{
		t100ms = 50;
 212:	82 e3       	ldi	r24, 0x32	; 50
 214:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <t100ms>
		GPIOR0 |= (1<<F100MS);
 218:	8e b3       	in	r24, 0x1e	; 30
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	8e bb       	out	0x1e, r24	; 30
	}
	
	if (GPIOR0 & (1<<BTNACTUAL)){	// Si el btn está press
 21e:	f3 9b       	sbis	0x1e, 3	; 30
 220:	0c c0       	rjmp	.+24     	; 0x23a <do_10ms+0x3c>
		if (tdebounce){				// Entra cuando es <> 0
 222:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tdebounce>
 226:	88 23       	and	r24, r24
 228:	21 f0       	breq	.+8      	; 0x232 <do_10ms+0x34>
			tdebounce --;
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tdebounce>
 230:	08 95       	ret
		}else{
			GPIOR0 |= (1<<BTNDOWN);
 232:	8e b3       	in	r24, 0x1e	; 30
 234:	80 61       	ori	r24, 0x10	; 16
 236:	8e bb       	out	0x1e, r24	; 30
 238:	08 95       	ret
		}
	}else{
		tdebounce = 10;
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tdebounce>
 240:	08 95       	ret

00000242 <do_Medicion>:
	}
}

void do_Medicion(){
	GPIOR1 &= ~(1<<INIMED);
 242:	8a b5       	in	r24, 0x2a	; 42
 244:	8f 7b       	andi	r24, 0xBF	; 191
 246:	8a bd       	out	0x2a, r24	; 42
	GPIOR1	|= (1<<FTRIGGER);
 248:	8a b5       	in	r24, 0x2a	; 42
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	8a bd       	out	0x2a, r24	; 42
	GPIOR1	&= ~(1<<ECHOSTATE);
 24e:	8a b5       	in	r24, 0x2a	; 42
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	8a bd       	out	0x2a, r24	; 42
	GPIOR1	&= ~(1<<ECHOFINISH);
 254:	8a b5       	in	r24, 0x2a	; 42
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	8a bd       	out	0x2a, r24	; 42
	//PCICR	|= (1<<PCIE0);				//!< Description: Hablilita la interrupción por cambio de flanco
	EICRA	|= (1<<ISC01) | (1<<ISC00); //!< Description: Configura el flanco a detectar. rising = 1-1. falling = 1-0
 25a:	e9 e6       	ldi	r30, 0x69	; 105
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	83 60       	ori	r24, 0x03	; 3
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <do_Transmit>:
}

void do_Transmit(){
	if (UCSR0A & (1<<UDRE0)){
 266:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 26a:	85 ff       	sbrs	r24, 5
 26c:	04 c0       	rjmp	.+8      	; 0x276 <do_Transmit+0x10>
		UDR0 = lastMedicion;					//!< Description: UDR0 es el registro que se carga para mandar los datos
 26e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lastMedicion>
 272:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 276:	08 95       	ret

00000278 <do_BTNCHANGE>:
		//UCSR0A &= ~(1<<UDRE0);
	}
}

void do_BTNCHANGE(){
	PORTB ^= (1<<LEDBUILDIN);
 278:	95 b1       	in	r25, 0x05	; 5
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	89 27       	eor	r24, r25
 27e:	85 b9       	out	0x05, r24	; 5
 280:	08 95       	ret

00000282 <main>:
	// GPIOR0 |= (1<<IS10MS) ES LO MISMO GPIOR0 |= _BV(IS10MS);
	// GPIOR0 |= (1<<5);  PONE SOLO El BIT 5 DEL REGISTRO EN 1
	// GPIOR0 &= ~(1<<5); PONE SOLO EL BIT 5 DEL REGISTRO EN 0
	
	// El START de assembler
	cli();
 282:	f8 94       	cli
	ini_ports();
 284:	0e 94 c6 00 	call	0x18c	; 0x18c <ini_ports>
	ini_Timer1();
 288:	0e 94 cb 00 	call	0x196	; 0x196 <ini_Timer1>
	ini_USART0();
 28c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <ini_USART0>
	ini_Externals();
 290:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ini_Externals>
	sei();
 294:	78 94       	sei
	tTRIGGER = 147;
 296:	83 e9       	ldi	r24, 0x93	; 147
 298:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tTRIGGER>
	t100ms = 30;
 29c:	8e e1       	ldi	r24, 0x1E	; 30
 29e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <t100ms>
	tdebounce = 10;
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tdebounce>
	MASKHEARBEAT = 58;
 2a8:	8a e3       	ldi	r24, 0x3A	; 58
 2aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <MASKHEARBEAT>
	HSCR04_Start();
 2ae:	0e 94 48 00 	call	0x90	; 0x90 <HSCR04_Start>
	
    while (1) 
    {
		if (GPIOR0 & (1<<F10US))
 2b2:	f2 9b       	sbis	0x1e, 2	; 30
 2b4:	1c c0       	rjmp	.+56     	; 0x2ee <main+0x6c>
		{
			GPIOR0 &= ~(1<<F10US);
 2b6:	8e b3       	in	r24, 0x1e	; 30
 2b8:	8b 7f       	andi	r24, 0xFB	; 251
 2ba:	8e bb       	out	0x1e, r24	; 30
			tTRIGGER --;
 2bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tTRIGGER>
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tTRIGGER>
			if(!tTRIGGER)
 2c6:	81 11       	cpse	r24, r1
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <main+0x54>
			{
				tTRIGGER = 147;
 2ca:	83 e9       	ldi	r24, 0x93	; 147
 2cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tTRIGGER>
				GPIOR1 |= (1<<INIMED);
 2d0:	8a b5       	in	r24, 0x2a	; 42
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	8a bd       	out	0x2a, r24	; 42
			}
			if (GPIOR1 & (1<<FTRIGGER)){
 2d6:	0a b4       	in	r0, 0x2a	; 42
 2d8:	07 fe       	sbrs	r0, 7
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <main+0x6c>
				if (PINB & (1<<TRIGGER)){		//!< Description: Si el trigger está en 1 pongo la flag en 0
 2dc:	19 9b       	sbis	0x03, 1	; 3
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <main+0x64>
					GPIOR1 &= ~(1<<FTRIGGER);	//!< Description: Porque no necesito hacer toggle de nuevo
 2e0:	8a b5       	in	r24, 0x2a	; 42
 2e2:	8f 77       	andi	r24, 0x7F	; 127
 2e4:	8a bd       	out	0x2a, r24	; 42
				}
				PORTB ^= (1<<TRIGGER);			//!< Description: Toggle del pin de trigger
 2e6:	95 b1       	in	r25, 0x05	; 5
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	89 27       	eor	r24, r25
 2ec:	85 b9       	out	0x05, r24	; 5
			}
		}
		
		if (GPIOR0 & (1<<F10MS)){
 2ee:	f0 99       	sbic	0x1e, 0	; 30
			do_10ms();
 2f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <do_10ms>
		}
		
		if(GPIOR0 & (1<<F100MS)){
 2f4:	f1 9b       	sbis	0x1e, 1	; 30
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <main+0x80>
			GPIOR0 &= ~(1<<F100MS);
 2f8:	8e b3       	in	r24, 0x1e	; 30
 2fa:	8d 7f       	andi	r24, 0xFD	; 253
 2fc:	8e bb       	out	0x1e, r24	; 30
			do_Transmit();
 2fe:	0e 94 33 01 	call	0x266	; 0x266 <do_Transmit>
		}
		
		
		if(GPIOR1 & (1<<INIMED)){
 302:	0a b4       	in	r0, 0x2a	; 42
 304:	06 fc       	sbrc	r0, 6
			do_Medicion();
 306:	0e 94 21 01 	call	0x242	; 0x242 <do_Medicion>
			lastMedicion = (tEchoDOWN - tEchoUP)/58;
			GPIOR0 &= ~(1<<ECHOFLAG);
			
		}
		*/
		if (GPIOR1 & (1<<ECHOFINISH))
 30a:	0a b4       	in	r0, 0x2a	; 42
 30c:	05 fe       	sbrs	r0, 5
 30e:	16 c0       	rjmp	.+44     	; 0x33c <main+0xba>
		{
			//PCICR	= 0x00;							//!< Description: Deshabilito la interrupción por cambio de flanco.
			lastMedicion = (tEchoDOWN - tEchoUP)/58;
 310:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <tEchoDOWN>
 314:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <tEchoDOWN+0x1>
 318:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tEchoUP>
 31c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <tEchoUP+0x1>
 320:	28 1b       	sub	r18, r24
 322:	39 0b       	sbc	r19, r25
 324:	af e9       	ldi	r26, 0x9F	; 159
 326:	b6 e4       	ldi	r27, 0x46	; 70
 328:	0e 94 b1 01 	call	0x362	; 0x362 <__umulhisi3>
 32c:	92 95       	swap	r25
 32e:	82 95       	swap	r24
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	89 27       	eor	r24, r25
 334:	9f 70       	andi	r25, 0x0F	; 15
 336:	89 27       	eor	r24, r25
 338:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lastMedicion>
		}
		
		//=============================CAPTURA DE BOTON
		if(!(PINB & (1<<PINB4))){			//!< Description: Actualiza la bandera de estado del btn
 33c:	1c 99       	sbic	0x03, 4	; 3
 33e:	04 c0       	rjmp	.+8      	; 0x348 <main+0xc6>
			GPIOR0 |= (1<<BTNACTUAL);		// Si el btn press == 1
 340:	8e b3       	in	r24, 0x1e	; 30
 342:	88 60       	ori	r24, 0x08	; 8
 344:	8e bb       	out	0x1e, r24	; 30
 346:	03 c0       	rjmp	.+6      	; 0x34e <main+0xcc>
		} else {
			GPIOR0 &= ~(1<<BTNACTUAL);		// Si el btn no press == 0
 348:	8e b3       	in	r24, 0x1e	; 30
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	8e bb       	out	0x1e, r24	; 30
		}
		
		if (GPIOR0 & (1<<BTNDOWN)){				//!< Description: Una vez presionado el boton
 34e:	f4 9b       	sbis	0x1e, 4	; 30
 350:	b0 cf       	rjmp	.-160    	; 0x2b2 <main+0x30>
			if (!(GPIOR0 & (1<<BTNACTUAL))){	//!< Description: Espera a que se suelte para ir a la funcion
 352:	f3 99       	sbic	0x1e, 3	; 30
 354:	ae cf       	rjmp	.-164    	; 0x2b2 <main+0x30>
				GPIOR0 &= ~(1<<BTNDOWN);
 356:	8e b3       	in	r24, 0x1e	; 30
 358:	8f 7e       	andi	r24, 0xEF	; 239
 35a:	8e bb       	out	0x1e, r24	; 30
				do_BTNCHANGE();	
 35c:	0e 94 3c 01 	call	0x278	; 0x278 <do_BTNCHANGE>
 360:	a8 cf       	rjmp	.-176    	; 0x2b2 <main+0x30>

00000362 <__umulhisi3>:
 362:	a2 9f       	mul	r26, r18
 364:	b0 01       	movw	r22, r0
 366:	b3 9f       	mul	r27, r19
 368:	c0 01       	movw	r24, r0
 36a:	a3 9f       	mul	r26, r19
 36c:	70 0d       	add	r23, r0
 36e:	81 1d       	adc	r24, r1
 370:	11 24       	eor	r1, r1
 372:	91 1d       	adc	r25, r1
 374:	b2 9f       	mul	r27, r18
 376:	70 0d       	add	r23, r0
 378:	81 1d       	adc	r24, r1
 37a:	11 24       	eor	r1, r1
 37c:	91 1d       	adc	r25, r1
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
